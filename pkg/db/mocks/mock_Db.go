// Code generated by MockGen. DO NOT EDIT.
// Source: db.go

// Package db is a generated GoMock package.
package db

import (
	gomock "github.com/golang/mock/gomock"
	model "location/pkg/db/model"
	reflect "reflect"
)

// MockDB is a mock of DB interface
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockDB) Get(id int) (*model.BranchOffice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*model.BranchOffice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockDBMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDB)(nil).Get), id)
}

// Create mocks base method
func (m *MockDB) Create(bo *model.BranchOffice) (*model.BranchOffice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", bo)
	ret0, _ := ret[0].(*model.BranchOffice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockDBMockRecorder) Create(bo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDB)(nil).Create), bo)
}

// All mocks base method
func (m *MockDB) All() []*model.BranchOffice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*model.BranchOffice)
	return ret0
}

// All indicates an expected call of All
func (mr *MockDBMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockDB)(nil).All))
}

// ByLatLong mocks base method
func (m *MockDB) ByLatLong(latitude, longitude float64) (*model.BranchOffice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByLatLong", latitude, longitude)
	ret0, _ := ret[0].(*model.BranchOffice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByLatLong indicates an expected call of ByLatLong
func (mr *MockDBMockRecorder) ByLatLong(latitude, longitude interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByLatLong", reflect.TypeOf((*MockDB)(nil).ByLatLong), latitude, longitude)
}
