// Code generated by MockGen. DO NOT EDIT.
// Source: cmd.go

// Package cmd is a generated GoMock package.
package cmd

import (
	gomock "github.com/golang/mock/gomock"
	api "location/api"
	reflect "reflect"
)

// MockCommand is a mock of Command interface
type MockCommand struct {
	ctrl     *gomock.Controller
	recorder *MockCommandMockRecorder
}

// MockCommandMockRecorder is the mock recorder for MockCommand
type MockCommandMockRecorder struct {
	mock *MockCommand
}

// NewMockCommand creates a new mock instance
func NewMockCommand(ctrl *gomock.Controller) *MockCommand {
	mock := &MockCommand{ctrl: ctrl}
	mock.recorder = &MockCommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommand) EXPECT() *MockCommandMockRecorder {
	return m.recorder
}

// Nearest mocks base method
func (m *MockCommand) Nearest(latitude, longitude float64) (*api.BranchOffice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Nearest", latitude, longitude)
	ret0, _ := ret[0].(*api.BranchOffice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Nearest indicates an expected call of Nearest
func (mr *MockCommandMockRecorder) Nearest(latitude, longitude interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nearest", reflect.TypeOf((*MockCommand)(nil).Nearest), latitude, longitude)
}

// Get mocks base method
func (m *MockCommand) Get(id int) (*api.BranchOffice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*api.BranchOffice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockCommandMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCommand)(nil).Get), id)
}

// Create mocks base method
func (m *MockCommand) Create(branchOffice *api.BranchOffice) (*api.BranchOffice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", branchOffice)
	ret0, _ := ret[0].(*api.BranchOffice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockCommandMockRecorder) Create(branchOffice interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCommand)(nil).Create), branchOffice)
}

// Find mocks base method
func (m *MockCommand) Find(latitude, longitude float64) (*api.BranchOffice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", latitude, longitude)
	ret0, _ := ret[0].(*api.BranchOffice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockCommandMockRecorder) Find(latitude, longitude interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockCommand)(nil).Find), latitude, longitude)
}
